name: Tests

on:
  push:
    branches: [ main, 174-tests-CI-CD ]
  pull_request:
    branches: [ main ]
  workflow_call: # Add this to make the workflow reusable

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16.5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: changeme
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis/redis-stack-server:7.2.0-v11
        env:
          REDIS_ARGS: --dir /data --requirepass changeme --user username on >password ~* allcommands
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      qdrant:
        image: qdrant/qdrant:v1.11.5-unprivileged
        env:
          QDRANT__SERVICE__API_KEY: changeme
        ports:
          - 6333:6333
          - 6334:6334

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ".[app,test]"
        
    - name: Setup environment
      run: |
        # Create .env file from GitHub secrets
        cat > .env << EOF
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=changeme
        POSTGRES_HOST=localhost
        POSTGRES_DB=postgres
        POSTGRES_PORT=5432
        REDIS_HOST=localhost
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
        QDRANT_HOST=localhost
        QDRANT__SERVICE__API_KEY: changeme
        GRIST_API_KEY=${{ secrets.GRIST_API_KEY }}
        GRIST_DOC_ID=${{ secrets.GRIST_DOC_ID }}
        ALBERT_API_KEY=${{ secrets.ALBERT_API_KEY }}
        EOF

    - name: Create config from template
      run: |
        echo "${{ secrets.CONFIG_YML }}" > config.yml
      env:
        GRIST_API_KEY: ${{ secrets.GRIST_API_KEY }}
        ALBERT_API_KEY: ${{ secrets.ALBERT_API_KEY }}
        
    - name: Run tests
      run: |
        python -m pytest tests --cov=./app --cov-report=xml --api-key-user=${{ secrets.API_KEY_USER }} --api-key-admin=${{ secrets.API_KEY_ADMIN }}
      
    - name: Create coverage badge
      run: |
        mkdir -p .github/badges
        # Extract coverage percentage from coverage.xml
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; print(ET.parse('coverage.xml').getroot().get('line-rate'))")
        COVERAGE_PCT=$(printf "%.2f" $(echo "${COVERAGE} * 100" | bc))
        echo "{\"schemaVersion\":1,\"label\":\"Coverage\",\"message\":\"${COVERAGE_PCT}%\",\"color\":\"$(if (( $(echo "${COVERAGE_PCT} >= 80" | bc -l) )); then echo "green"; elif (( $(echo "${COVERAGE_PCT} >= 70" | bc -l) )); then echo "yellow"; else echo "red"; fi)\"}" > .github/badges/coverage.json

    - name: Commit coverage badge
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Update coverage badge
        file_pattern: .github/badges/coverage.json
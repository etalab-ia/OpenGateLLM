services:
  api:
    build:
      context: .
      dockerfile: app/Dockerfile
    restart: always
    ports:
      - 8000:8000
    volumes:
      - ./config.yml:/config.yml:ro
    develop:
      watch:
        - action: sync+restart
          path: ./app
          target: /app
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  ui:
    build:
      context: .
      dockerfile: ui/Dockerfile
    restart: always
    environment:
      - BASE_URL=http://api:8000/v1
      - DOCUMENTS_EMBEDDINGS_MODEL=
      - EXCLUDE_MODELS=
    ports:
      - 8501:8501
    develop:
      watch:
        - action: sync+restart
          path: ./ui
          target: /app

  redis:
    image: redis/redis-stack-server:7.2.0-v11
    restart: always
    environment:
      REDIS_ARGS: --dir /data --requirepass changeme --user username on >password ~* allcommands --save 60 1 --appendonly yes
    volumes:
      - redis:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 4s
      timeout: 10s
      retries: 5
    ports:
      - 6379:6379

  qdrant:
    image: qdrant/qdrant:v1.11.5-unprivileged
    restart: always
    environment:
      - QDRANT__SERVICE__API_KEY=changeme
    volumes:
      - qdrant:/qdrant/storage
    ports:
      - 6333:6333
      - 6334:6334

  postgres:
    image: postgres:16.5
    restart: always
    user: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=changeme
      - POSTGRES_DB=postgres
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "postgres" ]
      interval: 4s
      timeout: 10s
      retries: 5
      start_period: 60s
    ports:
      - "5432:5432"

volumes:
  qdrant:
  redis:
  postgres:
